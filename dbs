#!/bin/bash
set -e

TIMESTAMP_FILE_PKGS=.dbs/timestamp_pkgs
TIMESTAMP_FILE_IMAGE=.dbs/timestamp_image

mkdir -p .dbs

if [ $# -eq 0 ]; then
  echo "No arguments provided. Please specify an action"
  exit 1
fi

case $1 in
    download)
    sh pkgs/download.sh
    ;;
    build)
    if [ $# -eq 1 ]; then
        sh pkgs/build-core.sh
    else
        packages=("${@:2}")
        for pkg in "${packages[@]}"; do
            if [ -f "pkgs/buildscripts/$pkg.sh" ]; then
                # picky ass fuckers
                if [ "util-linux" == $pkg ] || [ "pam" == $pkg ] || [ "libutmp" == $pkg ]; then
                    cd pkgs
                    fakeroot sh "buildscripts/$pkg.sh"
                    cd ..
                else
                    cd pkgs
                    sh "buildscripts/$pkg.sh"
                    cd ..
                fi
            else
                echo "Build script not found for package: $pkg"
            fi
        done
    fi
    if [ ! -f "$TIMESTAMP_FILE_PKGS" ]; then
        touch "$TIMESTAMP_FILE_PKGS"
        date +%s > "$TIMESTAMP_FILE_PKGS"
    fi
    date +%s > "$TIMESTAMP_FILE_PKGS"
    ;;
    image)
    if [ ! -f "$TIMESTAMP_FILE_IMAGE" ]; then
        touch "$TIMESTAMP_FILE_IMAGE"
        date +%s > "$TIMESTAMP_FILE_IMAGE"
    fi

    ts_pkgs=$(stat -c %Y "$TIMESTAMP_FILE_PKGS")
    ts_image=$(stat -c %Y "$TIMESTAMP_FILE_IMAGE")

    if [ "$2" == "force" ]; then
        echo "Forcing image rebuild"
    else
        if [ "$ts_image" -eq "$ts_pkgs" ]; then
            echo "Image is up to date, run \"dbs image force\" to force an image rebuild"
            exit 0
        fi
    fi

    sh scripts/make-image.sh

    date +%s > "$TIMESTAMP_FILE_IMAGE"
    date +%s > "$TIMESTAMP_FILE_PKGS"
    ;;
    run)

    if [ ! -f "$TIMESTAMP_FILE_IMAGE" ] || [ ! -f "$TIMESTAMP_FILE_PKGS" ]; then
        echo "No timestamps found! creating new ones"
        date +%s > "$TIMESTAMP_FILE_IMAGE"
        date +%s > "$TIMESTAMP_FILE_PKGS"
    fi
    ts_pkgs=$(stat -c %Y "$TIMESTAMP_FILE_PKGS")
    ts_image=$(stat -c %Y "$TIMESTAMP_FILE_IMAGE")

    if [ "$ts_image" -lt "$ts_pkgs" ]; then
        echo "Image is out of date!"
        read -p "Do you want to rebuild the image? [y/n] " answer
        answer=${answer:-N}
        case "$answer" in
            [Yy]|[Yy][Ee][Ss])
                echo "Rebuilding image..."
                sh $0 image
                ;;
            [Nn]|[Nn][Oo])
                echo "Skipping rebuild."
                ;;
            *)
                echo "Invalid response. Please enter y or n."
                ;;
        esac
    fi

    if [ -f "disk/disk.img" ]; then
        qemu-system-x86_64 -drive file=disk/disk.img,format=raw -m 2G -enable-kvm -serial stdio -cpu host
    else
        bash $0 image
        bash $0 run
    fi
    ;;
    vcs)
    ACTION=$2

    case $ACTION in
        sync)
            git pull
            git submodule update --recursive --remote
            git push --recurse-submodules=on-demand
        ;;
        commit)
            git add --all
            git commit -a -m "$3"
        ;;
        scommit)
            git add --all
            git commit -S -a -m "$3"
        ;;
        untrack)
            git rm --cached "$3"
        ;;
        *)
        echo "Unknown VCS action: $ACTION"
        exit 1
        ;;
    esac
    ;;
    *)
    echo "Unknown action: $1"
    exit 1
    ;;
esac
